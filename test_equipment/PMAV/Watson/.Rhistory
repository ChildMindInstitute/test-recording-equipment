interaction.plot(n37_perf_data_long$stranger,n37_perf_data_long$sm_dx,n37_perf_data_long$accuracy,type="b",trace.label="sm_dx",xlab = "stranger presence", ylab = "%", main="Accuracy", pch=c(18,24), col=c(1:3))
interaction.plot(n37_perf_data_long$vocal,n37_perf_data_long$sm_dx,n37_perf_data_long$accuracy,type="b", trace.label="sm_dx",xlab = "vocal condition", ylab = "%", main="Accuracy", pch=c(18,24), col=c(1:3))
perf <- aov(n37_perf_data_long$accuracy ~ (stranger*vocal*sm_dx)+Error(Subject_ID/(stranger*vocal))+(sm_dx), data=n37_perf_data_long)
summary(perf)
interaction.plot(n37_ampl_data_long$stranger,n37_ampl_data_long$sm_dx,n37_ampl_data_long$volume,type="b",trace.label="sm_dx",xlab = "stranger presence", ylab = "amplitude", main="Volume", pch=c(18,24), col=c(1:3))
ampl <- aov(n37_ampl_data_long$volume ~ (stranger*sm_dx)+Error(Subject_ID/(stranger*vocal))+(sm_dx), data=n37_ampl_data_long)
summary(ampl)
n37_data_long_rm_na <- na.omit(n37_data_long)
vocal_dv <- cbind(n37_data_long_rm_na$RT,n37_data_long_rm_na$accuracy,n37_data_long_rm_na$volume)
vocal_fit <- manova(vocal_dv ~ stranger*sm_dx, data=n37_data_long_rm_na)
summary(vocal_fit)
n37_data_long_no_ampl_rm_na <- na.omit(merge(n37_rt_data_long,n37_perf_data_long, by= c("Subject_ID","sm_dx","stranger","vocal"), all=TRUE))
button_dv <- cbind(n37_data_long_no_ampl_rm_na$RT,n37_data_long_no_ampl_rm_na$accuracy)
button_fit <- manova(button_dv ~ vocal*stranger*sm_dx, data=n37_data_long_no_ampl_rm_na)
summary(button_fit)
double(length = 0)
double(length = 1)
double(length = 2)
double(length = 4)
double(length = 1.4)
double(length = 2.4)
double(length = 2)
double(length = 0)
as.double(0)
as.double(0.5)
as.double(0.5.5)
as.double(0.5)
help.start()
rm(n37)
rm(*)
quit(save = "no")
x <- 7
y <- "diagnosis"
3.5 -> z
?Quotes
as.raw("\t")
x <- "\t"
as.raw("\t")
x <- "\t"
as.raw(x)
x <- "\t"
as.raw(y)
x <- "\t"
as.raw(z)
x <- "\t"
charToRaw(x)
x <- "\t"
charToRaw(y)
objects()
source('/Volumes/Data/Research/CDB/RA Didactics/Programming_Jan2017/Week1_ExampleCode.R', echo=TRUE)
View(m)
View(df)
head(df)
?Quotes
x <- "\t"
x
help()
?Quotes
x <- "\n"
my_special_char <- c("t","h","i","s")
same <- "this"
"string" + "other string"
help(paste)
example(paste)
help(paste)
help(<-)
help("<-")
my_special_char <- "\n"
my_special_char <- "\n"
my_special_char
help(help)
?c
example(c)
?Quotes
?Quotes
example(Quotes)
?rm
x <- 7
y <- “diagnosis”
x <- 7
y <- "diagnosis"
3.5 -> z
a <- z
?rm
rm(a)
?rm
rm(ll)
x <- 7
y <- "diagnosis"
3.5 -> z
a <- z
?rm
rm(a)
x + z
x + z
x - z
x + z
x - z
x * z
x / z
x ^ z
x %% z
x %/% z
x <- 7
y <- "diagnosis"
3.42 -> z
a <- z
?rm
rm(a)
x + z
x - z
x * z
x / z
x ^ z
x %% z
x %/% z
x < z
x > z
x == z
x >= z
x <= z
help(help)
?c
example(c)
x <- 7
y <- "diagnosis"
3.42 -> z
a <- z
?Quotes
?rm
rm(a)
x + z
x - z
x * z
x / z
x ^ z
x %% z
x %/% z
x < z
x > z
x == z
x >= z
x <= z
quotient = 10 / 3
integer_quotient = 10 %/% 3
modulus = 10 %% 3
quotient = 10 / 3
integer_quotient = 10 %/% 3
modulus = 10 %% 3
quotient == integer_quotient + modulus / 3
quotient = 10 / 3
quotient
integer_quotient = 10 %/% 3
modulus = 10 %% 3
integer_quotient
modulus
quotient == integer_quotient + modulus / 3
sqrt(x)
?exp
sqrt(x)
exp(x)
sqrt(x)
exp(x)
log(x)
abs(x)
sqrt(x)
exp(x)
log(x)
log(exp(x))
abs(x)
sqrt(x)
exp(x)
log(x)
-log(exp(x))
abs(-log(exp(x)))
my_char <- "Hello"
typeof(my_char)
my_char <- "Hello"
typeof(my_char)
my_num <- 1.4
typeof(my_num)
my_logical <- TRUE
typeof(my_logical)
empty_vector_1 <- vector()
empty_vector_1
empty_vector_2 <- vector("character", length = 12)
empty_vector_2
empty_vector_1 <- vector()
empty_vector_1
empty_vector_2 <- vector("character", length = 12)
empty_vector_2
typeof(empty_vector_2[0])
character(5)
numeric(5)
logical(5)
nums <- c(1,2,3)
nums
nums <- c(1,2,3)
nums
length(nums)
nums[2] = 10
nums
nums2 <- 1:100
nums2
nums3 <- seq(40)
nums4 <- seq(1, 10, by = .2)
#Can also add to a vector
nums5 <- c(nums4, 101)
nums5
nums3 <- seq(40)
nums3
nums4 <- seq(1, 10, by = .2)
#Can also add to a vector
nums5 <- c(nums4, 101)
nums5
c("char", 1, 1.0)
c(TRUE, 1, 97)
c(TRUE, 1, 0)
c("What", TRUE, FALSE)
va <- c("char", 1, 1.0)
vb <- c(TRUE, 1, 97)
vc <- c(TRUE, 1, 0)
vd <- c("What", TRUE, FALSE)
typeof(va)
va <- c("char", 1, 1.0)
vb <- c(TRUE, 1, 97)
vc <- c(TRUE, 1, 0)
vd <- c("What", TRUE, FALSE)
typeof(va[2])
va <- c("char", 1, 1.0)
vb <- c(TRUE, 1, 97)
vc <- c(TRUE, 1, 0)
vd <- c("What", TRUE, FALSE)
typeof(va[2])
typeof(vb[2])
va <- c("char", 1, 1.0)
vb <- c(TRUE, 1, 97)
vc <- c(TRUE, 1, 0)
vd <- c("What", TRUE, FALSE)
typeof(va[2])
typeof(vb[0])
va <- c("char", 1, 1.0)
vb <- c(TRUE, 1, 97)
vc <- c(TRUE, 1, 0)
vd <- c("What", TRUE, FALSE)
typeof(va[2])
typeof(vb[0])
typeof(vc[0])
va <- c("char", 1, 1.0)
vb <- c(TRUE, 1, 97)
vc <- c(TRUE, 1, 0)
vd <- c("What", TRUE, FALSE)
typeof(va[2])
typeof(vb[0])
typeof(vc[0])
typeof(vd[2])
m <- matrix(nrow = 3, ncol = 4)
dim(m)
m <- matrix(nrow = 3, ncol = 4)
dim(m)
m
m[1,1] = TRUE
m
m[1,2] = FALSE
m
m[2,] = TRUE
m
m1 <- matrix(1:10, nrow = 5, ncol = 2)
m1
m2 <- 1:25
dim(m2) <- c(5,5)
m2
m3 <- rbind(c(1:3), c(4:6), c(7:9))
m4 <- cbind(c(100:149), c(150:199), c(200:249))
m3
m4
m1 <- matrix(1:10, nrow = 5, ncol = 2)
m1
m2 <- 1:25
dim(m2) <- c(5,5)
m2
m3 <- rbind(c(1:3), c(4:6), c(7:9))
m4 <- cbind(c(100:149), c(150:199), c(200:249))
m3
m4
l <- list(1, TRUE, "three")
list_w_in_list <- list(FALSE, 2, l)
list_w_in_list[[4]] <- "This is the 4th item in the list"
list_w_in_list[[4]][[2]] <- "This is the 2nd part of the 4th item in the list"
list_w_in_list
l <- list(1, TRUE, "three")
list_w_in_list <- list(FALSE, 2, l)
list_w_in_list[[4]] <- "This is the 4th item in the list"
list_w_in_list[[4]][[2]] <- "This is the 2nd part of the 4th item in the list"
list_w_in_list
df <- data.frame(id = c(1:10), isOdd = c("Yes", "No", "Yes", "No", "Yes", "No", "Yes", "No", "Yes", "No"),
isEven = c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE))
head(df)
tail(df)
dim(df)
nrow(df)
ncol(df)
str(df)
?str
names(df)
df$isEven
df[2,1]
df[4,]
df$isEven
df[2,1]
df[4,]
df[2,1]
df[4,]
odd = factor(df$isOdd)
odd
3 + 4 #Notice how the answer appears in the console
x <- 100 - 2 #98
y <- 1.0 * 2 #2
z <- 10 / 3.0 #3.33
a <- 10%%2 #0
b <- 10%%3 #1
c <- 10%/%2 #5
d <- 10%/%3 #3
e <- sqrt(25) #5
exp(1) #2.718
log(100) #2
abs(-100) #100
3 + 4
exp(1) #2.718
log(100) #2
abs(-100) #100
x <- 100 - 2 #98
y <- 1.0 * 2 #2
z <- 10 / 3.0 #3.33
a <- 10%%2 #0
b <- 10%%3 #1
c <- 10%/%2 #5
d <- 10%/%3 #3
e <- sqrt(25) #5
x
y
z
a
b
c
d
e
nchar(my_string)
my_string <- "/Users/Username/Desktop/filename.csv"
nchar(my_string)
print(my_string)
print(my_string)
print("hello world!")
this_string <- "HeLlO WoRlD"
tolower(this_string) #Note: this_string itself does not actually change
toupper(this_string)
this_string <- "HeLlO WoRlD"
tolower(this_string) #Note: this_string itself does not actually change
toupper(this_string)
this_string
new_string1 = substring(this_string, 1, 3)
new_string2 = substring(this_string, 4) #if there is no 3rd argument, R defaults to the very end of the string
paste(new_string1, new_string2)
paste("This", "Sentence", "Is", "Separated", "by", "Forward", "Slashes", sep = "/")
knit_with_parameters('/Volumes/Data/Research/CDB/RA Didactics/Programming_Jan2017/R_Week1_Demos.Rmd')
x <- 7
y <- "diagnosis"
3.42 -> z
a <- z
b <- a -> c
x <- 7
y <- "diagnosis"
3.42 -> z
a <- z
b <- y -> c
?print
noquote("didactics")
"didactics"
"\u0x7f"
"\u0x7e"
"\u0x70"
"\u2222"
"\u2225"
"\u2228"
"\u2342"
"\u2347"
"\u2348"
"\u3445"
"\u3446"
"\u3447"
u <- c(1, 2, 3, 4)
v <- matrix(c(1, 2, 3, 4))
u <- c(1, 2, 3, 4)
v <- matrix(c(1, 2, 3, 4))
?matrix
?*
help('*')
u <- matrix(c(1, 2, 3, 4), byrow = TRUE)
v <- matrix(c(1, 2, 3, 4))
View(v)
View(v)
View(u)
View(v)
u <- matrix(c(1, 2, 3, 4), byrow = FALSE)
v <- matrix(c(1, 2, 3, 4))
View(u)
View(v)
u <- matrix(c(1, 2, 3, 4), byrow = FALSE)
v <- matrix(c(1, 2, 3, 4), nrow = 1, byrow = TRUE)
View(u)
View(v)
u * v
u %*% v
u %o% v
install.packages("tensor")
library(tensor)
?tensor
tensor(u, v)
u %*% v
u %+% v
u + v
u %/% v
u %*% v
1:4 %*% 1:4
library(tensor)
tensor(1:4, 1:4)
tensor(1:4, 1:4, 2, 1)
tensor(1:4, 1:4, alongA = 2, alongB = 1)
tensor(1:4, 1:4, alongA = 1, alongB = 1)
tensor(1:4, 1:4, alongA = 4, alongB = 1)
tensor(1:4, 1:4, alongA = 4, alongB = 4)
tensor(1:4, 1:4, alongA = 2, alongB = 2)
tensor(1:4, 1:4, alongA = 1, alongB = 0)
tensor(1:4, 1:4, alongA = -, alongB = 0)
tensor(1:4, 1:4, alongA = 0, alongB = 0)
tensor(1:4, 1:4)
tensor(1:4, 1:4, 1, 1)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
list[1]
print(list[1])
lists[1]
lists[2]
source('~/PMAV/transcripts.R', echo=TRUE)
install.packages(substr)
install.packages('substr)
''
'''
install.packages('substr')
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
lists[[3]]
lists[[4]]
lists[[2]]
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
View(temp_mat)
list
lists
colbind(lists)
do.call(cbind, lists)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
View(data_matrix)
View(data_matrix)
source('~/PMAV/transcripts.R', echo=TRUE)
View(data_matrix)
View(data_matrix)
source('~/PMAV/transcripts.R', echo=TRUE)
View(data_matrix)
hamming.distance(data_matrix, lists[[5]])
hamming.distance(data_matrix)
hamming.distance(data_matrix[[1]], data_matrix[[5]])
hamming.distance(data_matrix[[2]], data_matrix[[5]])
hamming.distance(data_matrix[[3]], data_matrix[[5]])
hamming.distance(data_matrix[[4]], data_matrix[[5]])
View(data_matrix)
data_matrix[[1]]
data_matrix[[:1]]
data_matrix[1]
data_matrix[1:]
data_matrix[:1]
data_matrix[,1]
hamming.distance(data_matrix[[,1]], data_matrix[[,5]])
hamming.distance(data_matrix[,1], data_matrix[,5])
hamming.distance(data_matrix[,2], data_matrix[,5])
hamming.distance(data_matrix[,3], data_matrix[,5])
hamming.distance(data_matrix[,4], data_matrix[,5])
source('~/PMAV/transcripts.R', echo=TRUE)
View(data_matrix)
hamming.distance(data_matrix[,1])
hamming.distance(data_matrix[,1], data_matrix[,5])
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
View(data_matrix)
hamming.distance(data_matrix[,1], data_matrix[,5])
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
View(data_matrix)
source('~/PMAV/transcripts.R', echo=TRUE)
View(data_matrix)
source('~/PMAV/transcripts.R', echo=TRUE)
source('~/PMAV/transcripts.R', echo=TRUE)
